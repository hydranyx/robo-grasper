// Auto-generated. Do not edit!

// (in-package alice_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class PointCloudFunctionResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.min_point = null;
      this.max_point = null;
      this.point = null;
    }
    else {
      if (initObj.hasOwnProperty('min_point')) {
        this.min_point = initObj.min_point
      }
      else {
        this.min_point = [];
      }
      if (initObj.hasOwnProperty('max_point')) {
        this.max_point = initObj.max_point
      }
      else {
        this.max_point = [];
      }
      if (initObj.hasOwnProperty('point')) {
        this.point = initObj.point
      }
      else {
        this.point = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PointCloudFunctionResult
    // Serialize message field [min_point]
    // Serialize the length for message field [min_point]
    bufferOffset = _serializer.uint32(obj.min_point.length, buffer, bufferOffset);
    obj.min_point.forEach((val) => {
      bufferOffset = geometry_msgs.msg.Point.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [max_point]
    // Serialize the length for message field [max_point]
    bufferOffset = _serializer.uint32(obj.max_point.length, buffer, bufferOffset);
    obj.max_point.forEach((val) => {
      bufferOffset = geometry_msgs.msg.Point.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [point]
    // Serialize the length for message field [point]
    bufferOffset = _serializer.uint32(obj.point.length, buffer, bufferOffset);
    obj.point.forEach((val) => {
      bufferOffset = geometry_msgs.msg.Point.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PointCloudFunctionResult
    let len;
    let data = new PointCloudFunctionResult(null);
    // Deserialize message field [min_point]
    // Deserialize array length for message field [min_point]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.min_point = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.min_point[i] = geometry_msgs.msg.Point.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [max_point]
    // Deserialize array length for message field [max_point]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.max_point = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.max_point[i] = geometry_msgs.msg.Point.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [point]
    // Deserialize array length for message field [point]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.point = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.point[i] = geometry_msgs.msg.Point.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 24 * object.min_point.length;
    length += 24 * object.max_point.length;
    length += 24 * object.point.length;
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'alice_msgs/PointCloudFunctionResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '63f2660951e11cc0788dcd78f585bfeb';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Result
    geometry_msgs/Point[] min_point # for dimensions
    geometry_msgs/Point[] max_point # for dimensions
    geometry_msgs/Point[] point     # for single points
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PointCloudFunctionResult(null);
    if (msg.min_point !== undefined) {
      resolved.min_point = new Array(msg.min_point.length);
      for (let i = 0; i < resolved.min_point.length; ++i) {
        resolved.min_point[i] = geometry_msgs.msg.Point.Resolve(msg.min_point[i]);
      }
    }
    else {
      resolved.min_point = []
    }

    if (msg.max_point !== undefined) {
      resolved.max_point = new Array(msg.max_point.length);
      for (let i = 0; i < resolved.max_point.length; ++i) {
        resolved.max_point[i] = geometry_msgs.msg.Point.Resolve(msg.max_point[i]);
      }
    }
    else {
      resolved.max_point = []
    }

    if (msg.point !== undefined) {
      resolved.point = new Array(msg.point.length);
      for (let i = 0; i < resolved.point.length; ++i) {
        resolved.point[i] = geometry_msgs.msg.Point.Resolve(msg.point[i]);
      }
    }
    else {
      resolved.point = []
    }

    return resolved;
    }
};

module.exports = PointCloudFunctionResult;
