;; Auto-generated. Do not edit!


(when (boundp 'alice_msgs::PointCloudFunctionResult)
  (if (not (find-package "ALICE_MSGS"))
    (make-package "ALICE_MSGS"))
  (shadow 'PointCloudFunctionResult (find-package "ALICE_MSGS")))
(unless (find-package "ALICE_MSGS::POINTCLOUDFUNCTIONRESULT")
  (make-package "ALICE_MSGS::POINTCLOUDFUNCTIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude PointCloudFunctionResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass alice_msgs::PointCloudFunctionResult
  :super ros::object
  :slots (_min_point _max_point _point ))

(defmethod alice_msgs::PointCloudFunctionResult
  (:init
   (&key
    ((:min_point __min_point) (let (r) (dotimes (i 0) (push (instance geometry_msgs::Point :init) r)) r))
    ((:max_point __max_point) (let (r) (dotimes (i 0) (push (instance geometry_msgs::Point :init) r)) r))
    ((:point __point) (let (r) (dotimes (i 0) (push (instance geometry_msgs::Point :init) r)) r))
    )
   (send-super :init)
   (setq _min_point __min_point)
   (setq _max_point __max_point)
   (setq _point __point)
   self)
  (:min_point
   (&rest __min_point)
   (if (keywordp (car __min_point))
       (send* _min_point __min_point)
     (progn
       (if __min_point (setq _min_point (car __min_point)))
       _min_point)))
  (:max_point
   (&rest __max_point)
   (if (keywordp (car __max_point))
       (send* _max_point __max_point)
     (progn
       (if __max_point (setq _max_point (car __max_point)))
       _max_point)))
  (:point
   (&rest __point)
   (if (keywordp (car __point))
       (send* _point __point)
     (progn
       (if __point (setq _point (car __point)))
       _point)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Point[] _min_point
    (apply #'+ (send-all _min_point :serialization-length)) 4
    ;; geometry_msgs/Point[] _max_point
    (apply #'+ (send-all _max_point :serialization-length)) 4
    ;; geometry_msgs/Point[] _point
    (apply #'+ (send-all _point :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Point[] _min_point
     (write-long (length _min_point) s)
     (dolist (elem _min_point)
       (send elem :serialize s)
       )
     ;; geometry_msgs/Point[] _max_point
     (write-long (length _max_point) s)
     (dolist (elem _max_point)
       (send elem :serialize s)
       )
     ;; geometry_msgs/Point[] _point
     (write-long (length _point) s)
     (dolist (elem _point)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Point[] _min_point
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _min_point (let (r) (dotimes (i n) (push (instance geometry_msgs::Point :init) r)) r))
     (dolist (elem- _min_point)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; geometry_msgs/Point[] _max_point
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _max_point (let (r) (dotimes (i n) (push (instance geometry_msgs::Point :init) r)) r))
     (dolist (elem- _max_point)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; geometry_msgs/Point[] _point
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _point (let (r) (dotimes (i n) (push (instance geometry_msgs::Point :init) r)) r))
     (dolist (elem- _point)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get alice_msgs::PointCloudFunctionResult :md5sum-) "63f2660951e11cc0788dcd78f585bfeb")
(setf (get alice_msgs::PointCloudFunctionResult :datatype-) "alice_msgs/PointCloudFunctionResult")
(setf (get alice_msgs::PointCloudFunctionResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
geometry_msgs/Point[] min_point # for dimensions
geometry_msgs/Point[] max_point # for dimensions
geometry_msgs/Point[] point     # for single points

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

")



(provide :alice_msgs/PointCloudFunctionResult "63f2660951e11cc0788dcd78f585bfeb")


