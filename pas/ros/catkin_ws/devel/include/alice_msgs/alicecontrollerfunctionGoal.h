// Generated by gencpp from file alice_msgs/alicecontrollerfunctionGoal.msg
// DO NOT EDIT!


#ifndef ALICE_MSGS_MESSAGE_ALICECONTROLLERFUNCTIONGOAL_H
#define ALICE_MSGS_MESSAGE_ALICECONTROLLERFUNCTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alice_msgs
{
template <class ContainerAllocator>
struct alicecontrollerfunctionGoal_
{
  typedef alicecontrollerfunctionGoal_<ContainerAllocator> Type;

  alicecontrollerfunctionGoal_()
    : function()
    , angle(0.0)
    , meter(0.0)
    , speed(0.0)  {
    }
  alicecontrollerfunctionGoal_(const ContainerAllocator& _alloc)
    : function(_alloc)
    , angle(0.0)
    , meter(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  _function_type function;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _meter_type;
  _meter_type meter;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct alicecontrollerfunctionGoal_

typedef ::alice_msgs::alicecontrollerfunctionGoal_<std::allocator<void> > alicecontrollerfunctionGoal;

typedef boost::shared_ptr< ::alice_msgs::alicecontrollerfunctionGoal > alicecontrollerfunctionGoalPtr;
typedef boost::shared_ptr< ::alice_msgs::alicecontrollerfunctionGoal const> alicecontrollerfunctionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alice_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'alice_msgs': ['/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/src/alice_msgs/msg', '/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/devel/share/alice_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31ec83cce11f58f31d1b0c418782bdbd";
  }

  static const char* value(const ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31ec83cce11f58f3ULL;
  static const uint64_t static_value2 = 0x1d1b0c418782bdbdULL;
};

template<class ContainerAllocator>
struct DataType< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alice_msgs/alicecontrollerfunctionGoal";
  }

  static const char* value(const ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
string function\n\
float32 angle\n\
float32 meter\n\
float32 speed\n\
";
  }

  static const char* value(const ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.function);
      stream.next(m.angle);
      stream.next(m.meter);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alicecontrollerfunctionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alice_msgs::alicecontrollerfunctionGoal_<ContainerAllocator>& v)
  {
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "meter: ";
    Printer<float>::stream(s, indent + "  ", v.meter);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALICE_MSGS_MESSAGE_ALICECONTROLLERFUNCTIONGOAL_H
