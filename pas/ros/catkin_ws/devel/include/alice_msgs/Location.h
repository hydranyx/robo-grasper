// Generated by gencpp from file alice_msgs/Location.msg
// DO NOT EDIT!


#ifndef ALICE_MSGS_MESSAGE_LOCATION_H
#define ALICE_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alice_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : minX(0.0)
    , minY(0.0)
    , minZ(0.0)
    , maxX(0.0)
    , maxY(0.0)
    , maxZ(0.0)  {
    }
  Location_(const ContainerAllocator& _alloc)
    : minX(0.0)
    , minY(0.0)
    , minZ(0.0)
    , maxX(0.0)
    , maxY(0.0)
    , maxZ(0.0)  {
  (void)_alloc;
    }



   typedef float _minX_type;
  _minX_type minX;

   typedef float _minY_type;
  _minY_type minY;

   typedef float _minZ_type;
  _minZ_type minZ;

   typedef float _maxX_type;
  _maxX_type maxX;

   typedef float _maxY_type;
  _maxY_type maxY;

   typedef float _maxZ_type;
  _maxZ_type maxZ;





  typedef boost::shared_ptr< ::alice_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alice_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::alice_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::alice_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::alice_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alice_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alice_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alice_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'alice_msgs': ['/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/src/alice_msgs/msg', '/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/devel/share/alice_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alice_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d2ba032729e001b08cfeded46b1cc3a";
  }

  static const char* value(const ::alice_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d2ba032729e001bULL;
  static const uint64_t static_value2 = 0x08cfeded46b1cc3aULL;
};

template<class ContainerAllocator>
struct DataType< ::alice_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alice_msgs/Location";
  }

  static const char* value(const ::alice_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alice_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 minX\n\
float32 minY\n\
float32 minZ\n\
float32 maxX\n\
float32 maxY\n\
float32 maxZ\n\
";
  }

  static const char* value(const ::alice_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alice_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minX);
      stream.next(m.minY);
      stream.next(m.minZ);
      stream.next(m.maxX);
      stream.next(m.maxY);
      stream.next(m.maxZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alice_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alice_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "minX: ";
    Printer<float>::stream(s, indent + "  ", v.minX);
    s << indent << "minY: ";
    Printer<float>::stream(s, indent + "  ", v.minY);
    s << indent << "minZ: ";
    Printer<float>::stream(s, indent + "  ", v.minZ);
    s << indent << "maxX: ";
    Printer<float>::stream(s, indent + "  ", v.maxX);
    s << indent << "maxY: ";
    Printer<float>::stream(s, indent + "  ", v.maxY);
    s << indent << "maxZ: ";
    Printer<float>::stream(s, indent + "  ", v.maxZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALICE_MSGS_MESSAGE_LOCATION_H
