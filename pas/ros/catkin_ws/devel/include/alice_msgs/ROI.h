// Generated by gencpp from file alice_msgs/ROI.msg
// DO NOT EDIT!


#ifndef ALICE_MSGS_MESSAGE_ROI_H
#define ALICE_MSGS_MESSAGE_ROI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alice_msgs
{
template <class ContainerAllocator>
struct ROI_
{
  typedef ROI_<ContainerAllocator> Type;

  ROI_()
    : left(0)
    , top(0)
    , right(0)
    , bottom(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
    }
  ROI_(const ContainerAllocator& _alloc)
    : left(0)
    , top(0)
    , right(0)
    , bottom(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _left_type;
  _left_type left;

   typedef int32_t _top_type;
  _top_type top;

   typedef int32_t _right_type;
  _right_type right;

   typedef int32_t _bottom_type;
  _bottom_type bottom;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _z_min_type;
  _z_min_type z_min;

   typedef float _z_max_type;
  _z_max_type z_max;





  typedef boost::shared_ptr< ::alice_msgs::ROI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alice_msgs::ROI_<ContainerAllocator> const> ConstPtr;

}; // struct ROI_

typedef ::alice_msgs::ROI_<std::allocator<void> > ROI;

typedef boost::shared_ptr< ::alice_msgs::ROI > ROIPtr;
typedef boost::shared_ptr< ::alice_msgs::ROI const> ROIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alice_msgs::ROI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alice_msgs::ROI_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alice_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'alice_msgs': ['/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/src/alice_msgs/msg', '/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/devel/share/alice_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::ROI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::ROI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::ROI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::ROI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::ROI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::ROI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alice_msgs::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8eade1c15e9ba7247a93b357e0059c0f";
  }

  static const char* value(const ::alice_msgs::ROI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8eade1c15e9ba724ULL;
  static const uint64_t static_value2 = 0x7a93b357e0059c0fULL;
};

template<class ContainerAllocator>
struct DataType< ::alice_msgs::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alice_msgs/ROI";
  }

  static const char* value(const ::alice_msgs::ROI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alice_msgs::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 left \n\
int32 top\n\
int32 right\n\
int32 bottom\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 z_min\n\
float32 z_max\n\
";
  }

  static const char* value(const ::alice_msgs::ROI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alice_msgs::ROI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.top);
      stream.next(m.right);
      stream.next(m.bottom);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.z_min);
      stream.next(m.z_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alice_msgs::ROI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alice_msgs::ROI_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left);
    s << indent << "top: ";
    Printer<int32_t>::stream(s, indent + "  ", v.top);
    s << indent << "right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right);
    s << indent << "bottom: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bottom);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "z_min: ";
    Printer<float>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<float>::stream(s, indent + "  ", v.z_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALICE_MSGS_MESSAGE_ROI_H
