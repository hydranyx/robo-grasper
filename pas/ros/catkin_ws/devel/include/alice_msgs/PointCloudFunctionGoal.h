// Generated by gencpp from file alice_msgs/PointCloudFunctionGoal.msg
// DO NOT EDIT!


#ifndef ALICE_MSGS_MESSAGE_POINTCLOUDFUNCTIONGOAL_H
#define ALICE_MSGS_MESSAGE_POINTCLOUDFUNCTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace alice_msgs
{
template <class ContainerAllocator>
struct PointCloudFunctionGoal_
{
  typedef PointCloudFunctionGoal_<ContainerAllocator> Type;

  PointCloudFunctionGoal_()
    : function()
    , transform_to_link()
    , return_type()
    , filter_min()
    , filter_max()
    , point()
    , min_cluster_points(0)
    , max_cluster_points(0)
    , cluster_distance(0.0)
    , flat_surface_threshold(0.0)
    , k(0)  {
    }
  PointCloudFunctionGoal_(const ContainerAllocator& _alloc)
    : function(_alloc)
    , transform_to_link(_alloc)
    , return_type(_alloc)
    , filter_min(_alloc)
    , filter_max(_alloc)
    , point(_alloc)
    , min_cluster_points(0)
    , max_cluster_points(0)
    , cluster_distance(0.0)
    , flat_surface_threshold(0.0)
    , k(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  _function_type function;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _transform_to_link_type;
  _transform_to_link_type transform_to_link;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _return_type_type;
  _return_type_type return_type;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _filter_min_type;
  _filter_min_type filter_min;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _filter_max_type;
  _filter_max_type filter_max;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef int32_t _min_cluster_points_type;
  _min_cluster_points_type min_cluster_points;

   typedef int32_t _max_cluster_points_type;
  _max_cluster_points_type max_cluster_points;

   typedef float _cluster_distance_type;
  _cluster_distance_type cluster_distance;

   typedef float _flat_surface_threshold_type;
  _flat_surface_threshold_type flat_surface_threshold;

   typedef int32_t _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PointCloudFunctionGoal_

typedef ::alice_msgs::PointCloudFunctionGoal_<std::allocator<void> > PointCloudFunctionGoal;

typedef boost::shared_ptr< ::alice_msgs::PointCloudFunctionGoal > PointCloudFunctionGoalPtr;
typedef boost::shared_ptr< ::alice_msgs::PointCloudFunctionGoal const> PointCloudFunctionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alice_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'alice_msgs': ['/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/src/alice_msgs/msg', '/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/devel/share/alice_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a07e1841c2de9b4adb7ea85017acf8cf";
  }

  static const char* value(const ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa07e1841c2de9b4aULL;
  static const uint64_t static_value2 = 0xdb7ea85017acf8cfULL;
};

template<class ContainerAllocator>
struct DataType< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alice_msgs/PointCloudFunctionGoal";
  }

  static const char* value(const ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
string function #find_table/find_closest_point/find_clusters\n\
string transform_to_link\n\
string return_type #largest/closest/all\n\
geometry_msgs/Point filter_min\n\
geometry_msgs/Point filter_max\n\
geometry_msgs/Point point\n\
int32 min_cluster_points\n\
int32 max_cluster_points\n\
float32 cluster_distance\n\
float32 flat_surface_threshold\n\
int32 k\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.function);
      stream.next(m.transform_to_link);
      stream.next(m.return_type);
      stream.next(m.filter_min);
      stream.next(m.filter_max);
      stream.next(m.point);
      stream.next(m.min_cluster_points);
      stream.next(m.max_cluster_points);
      stream.next(m.cluster_distance);
      stream.next(m.flat_surface_threshold);
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointCloudFunctionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alice_msgs::PointCloudFunctionGoal_<ContainerAllocator>& v)
  {
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
    s << indent << "transform_to_link: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transform_to_link);
    s << indent << "return_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.return_type);
    s << indent << "filter_min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.filter_min);
    s << indent << "filter_max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.filter_max);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "min_cluster_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_cluster_points);
    s << indent << "max_cluster_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_cluster_points);
    s << indent << "cluster_distance: ";
    Printer<float>::stream(s, indent + "  ", v.cluster_distance);
    s << indent << "flat_surface_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.flat_surface_threshold);
    s << indent << "k: ";
    Printer<int32_t>::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALICE_MSGS_MESSAGE_POINTCLOUDFUNCTIONGOAL_H
