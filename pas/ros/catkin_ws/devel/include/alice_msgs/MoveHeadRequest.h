// Generated by gencpp from file alice_msgs/MoveHeadRequest.msg
// DO NOT EDIT!


#ifndef ALICE_MSGS_MESSAGE_MOVEHEADREQUEST_H
#define ALICE_MSGS_MESSAGE_MOVEHEADREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alice_msgs
{
template <class ContainerAllocator>
struct MoveHeadRequest_
{
  typedef MoveHeadRequest_<ContainerAllocator> Type;

  MoveHeadRequest_()
    : pitch(0.0)
    , yaw(0.0)  {
    }
  MoveHeadRequest_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveHeadRequest_

typedef ::alice_msgs::MoveHeadRequest_<std::allocator<void> > MoveHeadRequest;

typedef boost::shared_ptr< ::alice_msgs::MoveHeadRequest > MoveHeadRequestPtr;
typedef boost::shared_ptr< ::alice_msgs::MoveHeadRequest const> MoveHeadRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alice_msgs::MoveHeadRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alice_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'alice_msgs': ['/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/src/alice_msgs/msg', '/home/mega/Documents/AutoSysPE/pas/ros/catkin_ws/devel/share/alice_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a19b17bdf8dab4d23fa8adb89a9e5e53";
  }

  static const char* value(const ::alice_msgs::MoveHeadRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa19b17bdf8dab4d2ULL;
  static const uint64_t static_value2 = 0x3fa8adb89a9e5e53ULL;
};

template<class ContainerAllocator>
struct DataType< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alice_msgs/MoveHeadRequest";
  }

  static const char* value(const ::alice_msgs::MoveHeadRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch\n\
float32 yaw\n\
";
  }

  static const char* value(const ::alice_msgs::MoveHeadRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveHeadRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alice_msgs::MoveHeadRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alice_msgs::MoveHeadRequest_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALICE_MSGS_MESSAGE_MOVEHEADREQUEST_H
