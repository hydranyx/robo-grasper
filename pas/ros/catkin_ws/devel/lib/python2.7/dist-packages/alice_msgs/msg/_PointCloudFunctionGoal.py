# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from alice_msgs/PointCloudFunctionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class PointCloudFunctionGoal(genpy.Message):
  _md5sum = "a07e1841c2de9b4adb7ea85017acf8cf"
  _type = "alice_msgs/PointCloudFunctionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
string function #find_table/find_closest_point/find_clusters
string transform_to_link
string return_type #largest/closest/all
geometry_msgs/Point filter_min
geometry_msgs/Point filter_max
geometry_msgs/Point point
int32 min_cluster_points
int32 max_cluster_points
float32 cluster_distance
float32 flat_surface_threshold
int32 k

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['function','transform_to_link','return_type','filter_min','filter_max','point','min_cluster_points','max_cluster_points','cluster_distance','flat_surface_threshold','k']
  _slot_types = ['string','string','string','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','int32','int32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       function,transform_to_link,return_type,filter_min,filter_max,point,min_cluster_points,max_cluster_points,cluster_distance,flat_surface_threshold,k

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointCloudFunctionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.function is None:
        self.function = ''
      if self.transform_to_link is None:
        self.transform_to_link = ''
      if self.return_type is None:
        self.return_type = ''
      if self.filter_min is None:
        self.filter_min = geometry_msgs.msg.Point()
      if self.filter_max is None:
        self.filter_max = geometry_msgs.msg.Point()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.min_cluster_points is None:
        self.min_cluster_points = 0
      if self.max_cluster_points is None:
        self.max_cluster_points = 0
      if self.cluster_distance is None:
        self.cluster_distance = 0.
      if self.flat_surface_threshold is None:
        self.flat_surface_threshold = 0.
      if self.k is None:
        self.k = 0
    else:
      self.function = ''
      self.transform_to_link = ''
      self.return_type = ''
      self.filter_min = geometry_msgs.msg.Point()
      self.filter_max = geometry_msgs.msg.Point()
      self.point = geometry_msgs.msg.Point()
      self.min_cluster_points = 0
      self.max_cluster_points = 0
      self.cluster_distance = 0.
      self.flat_surface_threshold = 0.
      self.k = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.function
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.transform_to_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.return_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d2i2fi().pack(_x.filter_min.x, _x.filter_min.y, _x.filter_min.z, _x.filter_max.x, _x.filter_max.y, _x.filter_max.z, _x.point.x, _x.point.y, _x.point.z, _x.min_cluster_points, _x.max_cluster_points, _x.cluster_distance, _x.flat_surface_threshold, _x.k))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.filter_min is None:
        self.filter_min = geometry_msgs.msg.Point()
      if self.filter_max is None:
        self.filter_max = geometry_msgs.msg.Point()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.function = str[start:end].decode('utf-8')
      else:
        self.function = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transform_to_link = str[start:end].decode('utf-8')
      else:
        self.transform_to_link = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.return_type = str[start:end].decode('utf-8')
      else:
        self.return_type = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.filter_min.x, _x.filter_min.y, _x.filter_min.z, _x.filter_max.x, _x.filter_max.y, _x.filter_max.z, _x.point.x, _x.point.y, _x.point.z, _x.min_cluster_points, _x.max_cluster_points, _x.cluster_distance, _x.flat_surface_threshold, _x.k,) = _get_struct_9d2i2fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.function
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.transform_to_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.return_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9d2i2fi().pack(_x.filter_min.x, _x.filter_min.y, _x.filter_min.z, _x.filter_max.x, _x.filter_max.y, _x.filter_max.z, _x.point.x, _x.point.y, _x.point.z, _x.min_cluster_points, _x.max_cluster_points, _x.cluster_distance, _x.flat_surface_threshold, _x.k))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.filter_min is None:
        self.filter_min = geometry_msgs.msg.Point()
      if self.filter_max is None:
        self.filter_max = geometry_msgs.msg.Point()
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.function = str[start:end].decode('utf-8')
      else:
        self.function = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transform_to_link = str[start:end].decode('utf-8')
      else:
        self.transform_to_link = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.return_type = str[start:end].decode('utf-8')
      else:
        self.return_type = str[start:end]
      _x = self
      start = end
      end += 92
      (_x.filter_min.x, _x.filter_min.y, _x.filter_min.z, _x.filter_max.x, _x.filter_max.y, _x.filter_max.z, _x.point.x, _x.point.y, _x.point.z, _x.min_cluster_points, _x.max_cluster_points, _x.cluster_distance, _x.flat_surface_threshold, _x.k,) = _get_struct_9d2i2fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d2i2fi = None
def _get_struct_9d2i2fi():
    global _struct_9d2i2fi
    if _struct_9d2i2fi is None:
        _struct_9d2i2fi = struct.Struct("<9d2i2fi")
    return _struct_9d2i2fi
